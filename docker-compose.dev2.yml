# Dev2環境専用のDocker Compose設定
# プロジェクト名をdev2に設定して完全分離
name: dev2

services:
  # フロントエンド（React）- Dev2専用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: dev2-frontend
    ports:
      - "3001:3000"  # Dev2は3001ポートを使用
    volumes:
      - ./frontend:/app
      - dev2_front_modules:/app/node_modules
      - dev2_front_cache:/app/node_modules/.vite
    environment:
      - VITE_API_URL=http://localhost:8001/api
      - VITE_API_BASE_URL=http://localhost:8001/api/v1
      - VITE_WS_URL=ws://localhost:8001
      - VITE_APP_PORT=3001
      - VITE_ENV=dev2
    env_file:
      - ./frontend/.env.development.dev2
    depends_on:
      - backend
    networks:
      - dev2net

  # バックエンド（Node.js）- Dev2専用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: dev2-backend
    ports:
      - "8001:8000"  # Dev2は8001ポートを使用（ホスト:コンテナ）
      - "9230:9229"  # デバッガー用（Dev2専用ポート）
    volumes:
      - ./backend:/app
      - dev2_backend_modules:/app/node_modules
      - dev2_backend_cache:/app/node_modules/.cache
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://skillsheet:password@postgres:5432/skillsheet_dev2
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=dev2-jwt-secret-change-in-production
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3001
      - LOG_LEVEL=debug
      - PORT=8001
      - APP_ENV=dev2
    env_file:
      - ./backend/.env.dev2
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - dev2net

  # PostgreSQL - Dev2専用
  postgres:
    image: postgres:15-alpine
    container_name: dev2-postgres
    ports:
      - "5433:5432"  # Dev2は5433ポートを使用
    environment:
      - POSTGRES_USER=skillsheet
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=skillsheet_dev2
    volumes:
      - dev2_postgres_data:/var/lib/postgresql/data
    networks:
      - dev2net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillsheet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Dev2専用
  redis:
    image: redis:7-alpine
    container_name: dev2-redis
    ports:
      - "6380:6379"  # Dev2は6380ポートを使用
    volumes:
      - dev2_redis_data:/data
    networks:
      - dev2net
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - Dev2専用
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: dev2-elasticsearch
    ports:
      - "9201:9200"  # Dev2は9201ポートを使用
      - "9301:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=dev2-cluster
    volumes:
      - dev2_es_data:/usr/share/elasticsearch/data
    networks:
      - dev2net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

# Dev2専用ネットワーク
networks:
  dev2net:
    driver: bridge
    name: dev2_network

# Dev2専用ボリューム
volumes:
  dev2_postgres_data:
    name: dev2_postgres_data
  dev2_redis_data:
    name: dev2_redis_data
  dev2_es_data:
    name: dev2_es_data
  dev2_front_modules:
    name: dev2_front_modules
  dev2_front_cache:
    name: dev2_front_cache
  dev2_backend_modules:
    name: dev2_backend_modules
  dev2_backend_cache:
    name: dev2_backend_cache